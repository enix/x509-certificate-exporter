stages:
  - test
  - build
  - release

variables:
  GITHUB_REPO: enix/$CI_PROJECT_NAME
  PLATFORMS: linux/amd64,linux/arm64
  STANDALONE_PLATFORMS: linux/386,linux/arm,linux/arm64,linux/amd64,windows/386,windows/amd64,darwin/amd64
  CACHE_TAG: $CI_REGISTRY_IMAGE:cache
  IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest

.only-master:
  only:
    - master
  except:
    - tags

.only-semver:
  only:
    refs:
      - /^v([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)\.([0-9]|[1-9][0-9]*)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?$/

.init-docker-buildx:
  variables:
    DOCKER_CLI_EXPERIMENTAL: enabled
  services:
    - docker:20-dind
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx "https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64"
    - chmod +x ~/.docker/cli-plugins/docker-buildx
    - docker context create $CI_PIPELINE_ID
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create $CI_PIPELINE_ID --name builder --use
    - docker buildx inspect builder
    - echo -n "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

test:
  stage: test
  image: golang:1.17-alpine
  except:
    - tags
  services:
    - docker:20-dind
  before_script:
    - apk add --update gcc libc-dev curl docker-cli bash
    - GO111MODULE="on" go get sigs.k8s.io/kind@v0.9.0
    - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x kubectl
    - mv kubectl /usr/local/bin
    - docker info
    - kind create cluster --name $CI_PIPELINE_ID --config=test/kind-config.yml
    - getent hosts docker
    - export IP=$(docker inspect $CI_PIPELINE_ID-control-plane --format '{{ .NetworkSettings.Networks.kind.Gateway }}')
    - sed -i -E -e "s/localhost|0\.0\.0\.0/docker/g" "$HOME/.kube/config"
    - kubectl --insecure-skip-tls-verify cluster-info
    - go mod tidy
  script:
    - go test -v -failfast -timeout 1m -coverprofile=coverage.cov ./internal
    - go tool cover -html=coverage.cov -o coverage.html
  after_script:
    - kind delete cluster --name $CI_PIPELINE_ID
  artifacts:
    paths:
      - coverage.html

build:
  extends:
    - .init-docker-buildx
    - .only-master
  stage: build
  image: docker:stable-dind
  script:
    - export IMAGE_TAG="$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
    - docker buildx build --platform "$PLATFORMS" -t "$IMAGE_TAG" --build-arg "VERSION=devel ($CI_COMMIT_SHORT_SHA)" --cache-from $CACHE_TAG --cache-to $CACHE_TAG --push .

build-latest:
  extends:
    - .init-docker-buildx
    - .only-semver
  stage: build
  image: docker:stable-dind
  script:
    - export IMAGE_TAG="$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME:1}"
    - docker buildx build --platform "$PLATFORMS" -t "$IMAGE_TAG" -t "$IMAGE_TAG_LATEST" --build-arg "VERSION=${CI_COMMIT_REF_SLUG:1}" --cache-from $CACHE_TAG --cache-to $CACHE_TAG --push .

semantic-release:
  extends:
    - .only-master
  stage: release
  image: enix/semantic-release:gitlab
  when: manual
  script:
    - "echo \"{\\\"repository\\\": \\\"https://github.com/${GITHUB_REPO}\\\"}\" > package.json"
    - semantic-release --ci

release-assets:
  stage: release
  image: golang:1.17
  extends:
    - .only-semver
  script:
    - export IFS=","
    - >
      for platform in $STANDALONE_PLATFORMS; do
        GOOS=$(echo "$platform" | cut -d'/' -f1)
        GOARCH=$(echo "$platform" | cut -d'/' -f2)
        BIN=$CI_PROJECT_NAME-$GOOS-$GOARCH
        go build -o $BIN -ldflags "-X \"enix.io/$CI_PROJECT_NAME/internal.Version=${CI_COMMIT_REF_SLUG:1}\"" ./cmd/$CI_PROJECT_NAME
        ./test/upload-release.sh "github_api_token=$GITHUB_TOKEN" "owner=enix" "repo=$CI_PROJECT_NAME" "tag=$CI_COMMIT_TAG" "filename=$BIN"
      done

docker-hub:
  extends:
    - .only-semver
  stage: release
  image:
    name: ananace/skopeo:latest
    entrypoint: [""]
  script:
    - export IMAGE_TAG="$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME:1}"
    - export PUBLIC_IMAGE_TAG="docker.io/$DOCKER_HUB_REPOSITORY/$CI_PROJECT_NAME:${CI_COMMIT_REF_NAME:1}"
    - export PUBLIC_IMAGE_TAG_LATEST="docker.io/$DOCKER_HUB_REPOSITORY/$CI_PROJECT_NAME:latest"
    - skopeo --insecure-policy copy --all --src-creds "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" --dest-creds "$DOCKER_HUB_USER:$DOCKER_HUB_PASSWORD" "docker://${IMAGE_TAG}" "docker://${PUBLIC_IMAGE_TAG}"
    - skopeo --insecure-policy copy --all --src-creds "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" --dest-creds "$DOCKER_HUB_USER:$DOCKER_HUB_PASSWORD" "docker://${IMAGE_TAG_LATEST}" "docker://${PUBLIC_IMAGE_TAG_LATEST}"

quay:
  extends:
    - .only-semver
  stage: release
  image:
    name: ananace/skopeo:latest
    entrypoint: [""]
  script:
    - export IMAGE_TAG="$CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME:1}"
    - export PUBLIC_IMAGE_TAG="$QUAY_REPOSITORY/$CI_PROJECT_NAME:${CI_COMMIT_REF_NAME:1}"
    - export PUBLIC_IMAGE_TAG_LATEST="$QUAY_REPOSITORY/$CI_PROJECT_NAME:latest"
    - skopeo --insecure-policy copy --all --src-creds "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" --dest-creds "$QUAY_USER:$QUAY_PASSWORD" "docker://${IMAGE_TAG}" "docker://${PUBLIC_IMAGE_TAG}"
    - skopeo --insecure-policy copy --all --src-creds "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" --dest-creds "$QUAY_USER:$QUAY_PASSWORD" "docker://${IMAGE_TAG_LATEST}" "docker://${PUBLIC_IMAGE_TAG_LATEST}"
